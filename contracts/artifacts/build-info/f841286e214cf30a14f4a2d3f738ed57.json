{
	"id": "f841286e214cf30a14f4a2d3f738ed57",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Fallout.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\";\n\ncontract Fallout {\n  \n  using SafeMath for uint256;\n  mapping (address => uint) allocations;\n  address payable public owner;\n\n\n  /* constructor */\n  function Fal1out() public payable {\n    owner = msg.sender;\n    allocations[owner] = msg.value;\n  }\n\n  modifier onlyOwner {\n      require(\n        msg.sender == owner,\n        \"caller is not the owner\"\n      );\n    _;\n  }\n\n  function allocate() public payable {\n    allocations[msg.sender] = allocations[msg.sender].add(msg.value);\n  }\n\n  function sendAllocation(address payable allocator) public {\n    require(allocations[allocator] > 0);\n    allocator.transfer(allocations[allocator]);\n  }\n\n  function collectAllocations() public onlyOwner {\n    msg.sender.transfer(address(this).balance);\n  }\n\n  function allocatorBalance(address allocator) public view returns (uint) {\n    return allocations[allocator];\n  }\n}"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Fallout.sol": {
				"Fallout": {
					"abi": [
						{
							"inputs": [],
							"name": "Fal1out",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allocate",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "allocatorBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectAllocations",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "allocator",
									"type": "address"
								}
							],
							"name": "sendAllocation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Fallout.sol\":171:1033  contract Fallout {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Fallout.sol\":171:1033  contract Fallout {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6fab5ddf\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x8aa96f38\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xa2dea26f\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xabaa9916\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xffd40b56\n      eq\n      tag_7\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Fallout.sol\":320:419  function Fal1out() public payable {... */\n    tag_2:\n      tag_8\n      tag_9\n      jump\t// in\n    tag_8:\n      stop\n        /* \"contracts/Fallout.sol\":815:915  function collectAllocations() public onlyOwner {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      pop\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      stop\n        /* \"contracts/Fallout.sol\":266:294  address payable public owner */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      pop\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Fallout.sol\":659:811  function sendAllocation(address payable allocator) public {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      pop\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_19\n      jump\t// in\n    tag_17:\n      stop\n        /* \"contracts/Fallout.sol\":545:655  function allocate() public payable {... */\n    tag_6:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      stop\n        /* \"contracts/Fallout.sol\":919:1031  function allocatorBalance(address allocator) public view returns (uint) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      pop\n      tag_23\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_25\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Fallout.sol\":320:419  function Fal1out() public payable {... */\n    tag_9:\n        /* \"contracts/Fallout.sol\":368:378  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":360:365  owner */\n      0x01\n      0x00\n        /* \"contracts/Fallout.sol\":360:378  owner = msg.sender */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Fallout.sol\":405:414  msg.value */\n      callvalue\n        /* \"contracts/Fallout.sol\":384:395  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":384:402  allocations[owner] */\n      dup1\n        /* \"contracts/Fallout.sol\":396:401  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":384:402  allocations[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Fallout.sol\":384:414  allocations[owner] = msg.value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Fallout.sol\":320:419  function Fal1out() public payable {... */\n      jump\t// out\n        /* \"contracts/Fallout.sol\":815:915  function collectAllocations() public onlyOwner {... */\n    tag_12:\n        /* \"contracts/Fallout.sol\":481:486  owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":467:486  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":467:477  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":467:486  msg.sender == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Fallout.sol\":450:529  require(... */\n      tag_28\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x17\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x63616c6c6572206973206e6f7420746865206f776e6572000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_28:\n        /* \"contracts/Fallout.sol\":868:878  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":868:887  msg.sender.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":868:910  msg.sender.transfer(address(this).balance) */\n      0x08fc\n        /* \"contracts/Fallout.sol\":888:909  address(this).balance */\n      selfbalance\n        /* \"contracts/Fallout.sol\":868:910  msg.sender.transfer(address(this).balance) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_31\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_31:\n      pop\n        /* \"contracts/Fallout.sol\":815:915  function collectAllocations() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Fallout.sol\":266:294  address payable public owner */\n    tag_15:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Fallout.sol\":659:811  function sendAllocation(address payable allocator) public {... */\n    tag_19:\n        /* \"contracts/Fallout.sol\":756:757  0 */\n      0x00\n        /* \"contracts/Fallout.sol\":731:742  allocations */\n      dup1\n        /* \"contracts/Fallout.sol\":731:753  allocations[allocator] */\n      0x00\n        /* \"contracts/Fallout.sol\":743:752  allocator */\n      dup4\n        /* \"contracts/Fallout.sol\":731:753  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":731:757  allocations[allocator] > 0 */\n      gt\n        /* \"contracts/Fallout.sol\":723:758  require(allocations[allocator] > 0) */\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n        /* \"contracts/Fallout.sol\":764:773  allocator */\n      dup1\n        /* \"contracts/Fallout.sol\":764:782  allocator.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Fallout.sol\":764:806  allocator.transfer(allocations[allocator]) */\n      0x08fc\n        /* \"contracts/Fallout.sol\":783:794  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":783:805  allocations[allocator] */\n      dup1\n        /* \"contracts/Fallout.sol\":795:804  allocator */\n      dup5\n        /* \"contracts/Fallout.sol\":783:805  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":764:806  allocator.transfer(allocations[allocator]) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_35\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_35:\n      pop\n        /* \"contracts/Fallout.sol\":659:811  function sendAllocation(address payable allocator) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Fallout.sol\":545:655  function allocate() public payable {... */\n    tag_21:\n        /* \"contracts/Fallout.sol\":612:650  allocations[msg.sender].add(msg.value) */\n      tag_37\n        /* \"contracts/Fallout.sol\":640:649  msg.value */\n      callvalue\n        /* \"contracts/Fallout.sol\":612:623  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":612:635  allocations[msg.sender] */\n      dup1\n        /* \"contracts/Fallout.sol\":624:634  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":612:635  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":612:639  allocations[msg.sender].add */\n      tag_38\n      swap1\n        /* \"contracts/Fallout.sol\":612:650  allocations[msg.sender].add(msg.value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_37:\n        /* \"contracts/Fallout.sol\":586:597  allocations */\n      0x00\n        /* \"contracts/Fallout.sol\":586:609  allocations[msg.sender] */\n      dup1\n        /* \"contracts/Fallout.sol\":598:608  msg.sender */\n      caller\n        /* \"contracts/Fallout.sol\":586:609  allocations[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Fallout.sol\":586:650  allocations[msg.sender] = allocations[msg.sender].add(msg.value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Fallout.sol\":545:655  function allocate() public payable {... */\n      jump\t// out\n        /* \"contracts/Fallout.sol\":919:1031  function allocatorBalance(address allocator) public view returns (uint) {... */\n    tag_25:\n        /* \"contracts/Fallout.sol\":985:989  uint */\n      0x00\n        /* \"contracts/Fallout.sol\":1004:1015  allocations */\n      dup1\n        /* \"contracts/Fallout.sol\":1004:1026  allocations[allocator] */\n      0x00\n        /* \"contracts/Fallout.sol\":1016:1025  allocator */\n      dup4\n        /* \"contracts/Fallout.sol\":1004:1026  allocations[allocator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Fallout.sol\":997:1026  return allocations[allocator] */\n      swap1\n      pop\n        /* \"contracts/Fallout.sol\":919:1031  function allocatorBalance(address allocator) public view returns (uint) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_38:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":925:932  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:953  uint256 c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":960:961  b */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:957  a */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":956:961  a + b */\n      add\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":944:961  uint256 c = a + b */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":984:985  a */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:980  c */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":979:985  c >= a */\n      lt\n      iszero\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":971:1017  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_41\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_41:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1035:1036  c */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":1028:1036  return c */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":867:1043  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ab6b5133cb54121a535c96f4d25fadb66e498e54f47302e7298fe3729684e3a664736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506105c4806100206000396000f3fe6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100bc578063abaa99161461010d578063ffd40b5614610117575b600080fd5b61006261017c565b005b34801561007057600080fd5b50610079610224565b005b34801561008757600080fd5b50610090610330565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100c857600080fd5b5061010b600480360360208110156100df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610356565b005b610115610429565b005b34801561012357600080fd5b506101666004803603602081101561013a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104be565b6040518082815260200191505060405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561032d573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103a157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610425573d6000803e3d6000fd5b5050565b61047a346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461050690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828401905083811015610584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220ab6b5133cb54121a535c96f4d25fadb66e498e54f47302e7298fe3729684e3a664736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C4 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0x117 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x17C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x224 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x330 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x356 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x115 PUSH2 0x429 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x166 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x32D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x425 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x47A CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x584 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB PUSH12 0x5133CB54121A535C96F4D25F 0xAD 0xB6 PUSH15 0x498E54F47302E7298FE3729684E3A6 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "171:862:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100645780638da5cb5b1461007b578063a2dea26f146100bc578063abaa99161461010d578063ffd40b5614610117575b600080fd5b61006261017c565b005b34801561007057600080fd5b50610079610224565b005b34801561008757600080fd5b50610090610330565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100c857600080fd5b5061010b600480360360208110156100df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610356565b005b610115610429565b005b34801561012357600080fd5b506101666004803603602081101561013a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104be565b6040518082815260200191505060405180910390f35b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561032d573d6000803e3d6000fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103a157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610425573d6000803e3d6000fd5b5050565b61047a346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461050690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828401905083811015610584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220ab6b5133cb54121a535c96f4d25fadb66e498e54f47302e7298fe3729684e3a664736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0x117 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH2 0x17C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79 PUSH2 0x224 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x90 PUSH2 0x330 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x356 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x115 PUSH2 0x429 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x166 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLER PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x32D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x425 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x47A CALLVALUE PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x584 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB PUSH12 0x5133CB54121A535C96F4D25F 0xAD 0xB6 PUSH15 0x498E54F47302E7298FE3729684E3A6 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "171:862:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;320:99;;;:::i;:::-;;815:100;;;;;;;;;;;;;:::i;:::-;;266:28;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;659:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;545:110;;;:::i;:::-;;919:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;320:99;368:10;360:5;;:18;;;;;;;;;;;;;;;;;;405:9;384:11;:18;396:5;;;;;;;;;;;384:18;;;;;;;;;;;;;;;:30;;;;320:99::o;815:100::-;481:5;;;;;;;;;;;467:19;;:10;:19;;;450:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;868:10:::1;:19;;:42;888:21;868:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;815:100::o:0;266:28::-;;;;;;;;;;;;;:::o;659:152::-;756:1;731:11;:22;743:9;731:22;;;;;;;;;;;;;;;;:26;723:35;;;;;;764:9;:18;;:42;783:11;:22;795:9;783:22;;;;;;;;;;;;;;;;764:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;659:152;:::o;545:110::-;612:38;640:9;612:11;:23;624:10;612:23;;;;;;;;;;;;;;;;:27;;:38;;;;:::i;:::-;586:11;:23;598:10;586:23;;;;;;;;;;;;;;;:64;;;;545:110::o;919:112::-;985:4;1004:11;:22;1016:9;1004:22;;;;;;;;;;;;;;;;997:29;;919:112;;;:::o;867:176:1:-;925:7;944:9;960:1;956;:5;944:17;;984:1;979;:6;;971:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:1;1028:8;;;867:176;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "295200",
								"executionCost": "337",
								"totalCost": "295537"
							},
							"external": {
								"Fal1out()": "41903",
								"allocate()": "infinite",
								"allocatorBalance(address)": "1284",
								"collectAllocations()": "infinite",
								"owner()": "1069",
								"sendAllocation(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 1033,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ab6b5133cb54121a535c96f4d25fadb66e498e54f47302e7298fe3729684e3a664736f6c634300060c0033",
									".code": [
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "6FAB5DDF"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "8AA96F38"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "A2DEA26F"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "ABAA9916"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "FFD40B56"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 171,
											"end": 1033,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 320,
											"end": 419,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 320,
											"end": 419,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 320,
											"end": 419,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 320,
											"end": 419,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 320,
											"end": 419,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 320,
											"end": 419,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 320,
											"end": 419,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 320,
											"end": 419,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 545,
											"end": 655,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 545,
											"end": 655,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 545,
											"end": 655,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 655,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 545,
											"end": 655,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 545,
											"end": 655,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 545,
											"end": 655,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 545,
											"end": 655,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 320,
											"end": 419,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 320,
											"end": 419,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 368,
											"end": 378,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 360,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 360,
											"end": 365,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 360,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 360,
											"end": 378,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 360,
											"end": 378,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 360,
											"end": 378,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 360,
											"end": 378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 405,
											"end": 414,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 384,
											"end": 395,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 384,
											"end": 402,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 396,
											"end": 401,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 396,
											"end": 401,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 396,
											"end": 401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 396,
											"end": 401,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 396,
											"end": 401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 396,
											"end": 401,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 396,
											"end": 401,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 396,
											"end": 401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 396,
											"end": 401,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 396,
											"end": 401,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 396,
											"end": 401,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 384,
											"end": 402,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 384,
											"end": 402,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 384,
											"end": 402,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 384,
											"end": 402,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 384,
											"end": 402,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 384,
											"end": 402,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 384,
											"end": 414,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 384,
											"end": 414,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 384,
											"end": 414,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 384,
											"end": 414,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 320,
											"end": 419,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 815,
											"end": 915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 481,
											"end": 486,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 481,
											"end": 486,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 481,
											"end": 486,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 481,
											"end": 486,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 481,
											"end": 486,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 481,
											"end": 486,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 481,
											"end": 486,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 481,
											"end": 486,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 481,
											"end": 486,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 481,
											"end": 486,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 481,
											"end": 486,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 467,
											"end": 486,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 467,
											"end": 486,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 467,
											"end": 477,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 467,
											"end": 486,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 467,
											"end": 486,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 467,
											"end": 486,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "63616C6C6572206973206E6F7420746865206F776E6572000000000000000000"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 450,
											"end": 529,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 450,
											"end": 529,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 868,
											"end": 878,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 868,
											"end": 887,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 868,
											"end": 887,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 888,
											"end": 909,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 868,
											"end": 910,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 868,
											"end": 910,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 868,
											"end": 910,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 868,
											"end": 910,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 868,
											"end": 910,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 868,
											"end": 910,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 868,
											"end": 910,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 868,
											"end": 910,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 815,
											"end": 915,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 266,
											"end": 294,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 266,
											"end": 294,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 756,
											"end": 757,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 731,
											"end": 742,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 743,
											"end": 752,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 731,
											"end": 753,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 731,
											"end": 753,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 731,
											"end": 753,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 731,
											"end": 753,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 731,
											"end": 753,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 731,
											"end": 753,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 731,
											"end": 757,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 723,
											"end": 758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 723,
											"end": 758,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 723,
											"end": 758,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 723,
											"end": 758,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 723,
											"end": 758,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 723,
											"end": 758,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 723,
											"end": 758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 764,
											"end": 773,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 782,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 764,
											"end": 782,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 783,
											"end": 794,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 783,
											"end": 805,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 795,
											"end": 804,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 783,
											"end": 805,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 783,
											"end": 805,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 783,
											"end": 805,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 783,
											"end": 805,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 783,
											"end": 805,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 783,
											"end": 805,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 764,
											"end": 806,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 764,
											"end": 806,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 764,
											"end": 806,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 764,
											"end": 806,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 764,
											"end": 806,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 764,
											"end": 806,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 764,
											"end": 806,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 764,
											"end": 806,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 659,
											"end": 811,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 545,
											"end": 655,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 545,
											"end": 655,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 612,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 640,
											"end": 649,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 612,
											"end": 623,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 612,
											"end": 635,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 624,
											"end": 634,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 612,
											"end": 635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 612,
											"end": 635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 612,
											"end": 635,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 612,
											"end": 635,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 612,
											"end": 635,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 612,
											"end": 635,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 612,
											"end": 639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 612,
											"end": 639,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 612,
											"end": 650,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 612,
											"end": 650,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 612,
											"end": 650,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 612,
											"end": 650,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 612,
											"end": 650,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 612,
											"end": 650,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 612,
											"end": 650,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 586,
											"end": 597,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 586,
											"end": 609,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 598,
											"end": 608,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 586,
											"end": 609,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 586,
											"end": 609,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 586,
											"end": 609,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 586,
											"end": 609,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 586,
											"end": 609,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 586,
											"end": 609,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 586,
											"end": 650,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 586,
											"end": 650,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 586,
											"end": 650,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 586,
											"end": 650,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 545,
											"end": 655,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 985,
											"end": 989,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1004,
											"end": 1015,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 1025,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 997,
											"end": 1026,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 997,
											"end": 1026,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 1031,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 925,
											"end": 932,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 944,
											"end": 953,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 960,
											"end": 961,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 956,
											"end": 957,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 956,
											"end": 961,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 944,
											"end": 961,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 944,
											"end": 961,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 984,
											"end": 985,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 979,
											"end": 980,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 979,
											"end": 985,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 979,
											"end": 985,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "1B"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 971,
											"end": 1017,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1035,
											"end": 1036,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1028,
											"end": 1036,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 867,
											"end": 1043,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Fal1out()": "6fab5ddf",
							"allocate()": "abaa9916",
							"allocatorBalance(address)": "ffd40b56",
							"collectAllocations()": "8aa96f38",
							"owner()": "8da5cb5b",
							"sendAllocation(address)": "a2dea26f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Fal1out\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"allocatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"sendAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fallout.sol\":\"Fallout\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Fallout.sol\":{\"keccak256\":\"0xc85a66d84ba1826838ee5f82cc83c299de7d8e2b40c6a982037a4d31a6235809\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02ea230b8cf499ce1289c7bcbc79390ca8d40a6d533097af45fa9810b82a9d6d\",\"dweb:/ipfs/QmT2Aorkxm7YwkgMHA3VFx4sYJrxgCAoGDAUMmfqLMS5DR\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 9,
								"contract": "contracts/Fallout.sol:Fallout",
								"label": "allocations",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 11,
								"contract": "contracts/Fallout.sol:Fallout",
								"label": "owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":622:5210  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0xCB PUSH15 0x63ED0C592B58A945EA71862980410E SWAP12 0xAE BALANCE DIFFICULTY BYTE PUSH7 0x75F437262F9C35 CODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "622:4588:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0xCB PUSH15 0x63ED0C592B58A945EA71862980410E SWAP12 0xAE BALANCE DIFFICULTY BYTE PUSH7 0x75F437262F9C35 CODECOPY PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "622:4588:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 622,
									"end": 5210,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122030cb6e63ed0c592b58a945ea71862980410e9bae31441a6675f437262f9c353964736f6c634300060c0033",
									".code": [
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 622,
											"end": 5210,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xaa0e11a791bc975d581a4f5b7a8d9c16a880a354c89312318ae072ae3e740409\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://982d8b344f76193834260436d74c81e5a8f9e89106bb4cd72bbaabda4f3f59c2\",\"dweb:/ipfs/QmSrvP5TkQRhKDVCTpsV3uaKLBhkt7PjUY89vdtM9o5ybK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/Fallout.sol": {
				"ast": {
					"absolutePath": "contracts/Fallout.sol",
					"exportedSymbols": {
						"Fallout": [
							110
						]
					},
					"id": 111,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 111,
							"sourceUnit": 307,
							"src": "57:112:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 110,
							"linearizedBaseContracts": [
								110
							],
							"name": "Fallout",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 5,
									"libraryName": {
										"contractScope": null,
										"id": 3,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 306,
										"src": "201:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$306",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "195:27:0",
									"typeName": {
										"id": 4,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "214:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 9,
									"mutability": "mutable",
									"name": "allocations",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 110,
									"src": "225:37:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 8,
										"keyType": {
											"id": 6,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "234:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "225:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 7,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "245:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 11,
									"mutability": "mutable",
									"name": "owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 110,
									"src": "266:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 10,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "266:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 26,
										"nodeType": "Block",
										"src": "354:65:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 14,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "360:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 15,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "368:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "368:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "360:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "360:18:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 19,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "384:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 21,
														"indexExpression": {
															"argumentTypes": null,
															"id": 20,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "396:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "384:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 22,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "405:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 23,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "405:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "384:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 25,
												"nodeType": "ExpressionStatement",
												"src": "384:30:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "6fab5ddf",
									"id": 27,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Fal1out",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "336:2:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "354:0:0"
									},
									"scope": 110,
									"src": "320:99:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 38,
										"nodeType": "Block",
										"src": "442:99:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 30,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "467:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 31,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "467:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 32,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "481:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "467:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "63616c6c6572206973206e6f7420746865206f776e6572",
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "496:25:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															},
															"value": "caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
																"typeString": "literal_string \"caller is not the owner\""
															}
														],
														"id": 29,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "450:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "450:79:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 36,
												"nodeType": "ExpressionStatement",
												"src": "450:79:0"
											},
											{
												"id": 37,
												"nodeType": "PlaceholderStatement",
												"src": "535:1:0"
											}
										]
									},
									"documentation": null,
									"id": 39,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "442:0:0"
									},
									"src": "423:118:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 56,
										"nodeType": "Block",
										"src": "580:75:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 42,
															"name": "allocations",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "586:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 45,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 43,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "598:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 44,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "598:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "586:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 51,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -15,
																	"src": "640:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "640:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 46,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "612:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 49,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 47,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "624:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 48,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "624:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "612:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 139,
															"src": "612:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 53,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "612:38:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "586:64:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "586:64:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "abaa9916",
									"id": 57,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocate",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "562:2:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "580:0:0"
									},
									"scope": 110,
									"src": "545:110:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 78,
										"nodeType": "Block",
										"src": "717:94:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 67,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 63,
																	"name": "allocations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "731:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 65,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 64,
																	"name": "allocator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 59,
																	"src": "743:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "731:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 66,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "756:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "731:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 62,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "723:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 68,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "723:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 69,
												"nodeType": "ExpressionStatement",
												"src": "723:35:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 73,
																"name": "allocations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "783:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 75,
															"indexExpression": {
																"argumentTypes": null,
																"id": 74,
																"name": "allocator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 59,
																"src": "795:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "783:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 70,
															"name": "allocator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 59,
															"src": "764:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "764:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "764:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "764:42:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "a2dea26f",
									"id": 79,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendAllocation",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 79,
												"src": "683:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "683:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "682:27:0"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "717:0:0"
									},
									"scope": 110,
									"src": "659:152:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "862:53:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 91,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -28,
																		"src": "896:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Fallout_$110",
																			"typeString": "contract Fallout"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Fallout_$110",
																			"typeString": "contract Fallout"
																		}
																	],
																	"id": 90,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "888:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 89,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "888:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "888:13:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 93,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "888:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 84,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "868:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 87,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "868:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 88,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "868:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "868:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "868:42:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "8aa96f38",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 82,
											"modifierName": {
												"argumentTypes": null,
												"id": 81,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 39,
												"src": "852:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "852:9:0"
										}
									],
									"name": "collectAllocations",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "842:2:0"
									},
									"returnParameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "862:0:0"
									},
									"scope": 110,
									"src": "815:100:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 108,
										"nodeType": "Block",
										"src": "991:40:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 104,
														"name": "allocations",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "1004:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 106,
													"indexExpression": {
														"argumentTypes": null,
														"id": 105,
														"name": "allocator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 99,
														"src": "1016:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1004:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 103,
												"id": 107,
												"nodeType": "Return",
												"src": "997:29:0"
											}
										]
									},
									"documentation": null,
									"functionSelector": "ffd40b56",
									"id": 109,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allocatorBalance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "allocator",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 109,
												"src": "945:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 98,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "944:19:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 109,
												"src": "985:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 101,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "985:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "984:6:0"
									},
									"scope": 110,
									"src": "919:112:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 111,
							"src": "171:862:0"
						}
					],
					"src": "32:1001:0"
				},
				"id": 0
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							306
						]
					},
					"id": 307,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 112,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 113,
								"nodeType": "StructuredDocumentation",
								"src": "58:563:1",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 306,
							"linearizedBaseContracts": [
								306
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 138,
										"nodeType": "Block",
										"src": "934:109:1",
										"statements": [
											{
												"assignments": [
													124
												],
												"declarations": [
													{
														"constant": false,
														"id": 124,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 138,
														"src": "944:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 123,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "944:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 128,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 125,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 116,
														"src": "956:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 126,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "960:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "956:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "944:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 130,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 124,
																"src": "979:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 131,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "984:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "979:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 133,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "987:29:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 129,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "971:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "971:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 135,
												"nodeType": "ExpressionStatement",
												"src": "971:46:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 136,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 124,
													"src": "1035:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 122,
												"id": 137,
												"nodeType": "Return",
												"src": "1028:8:1"
											}
										]
									},
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "645:217:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 139,
												"src": "880:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "880:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 139,
												"src": "891:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "879:22:1"
									},
									"returnParameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 139,
												"src": "925:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "924:9:1"
									},
									"scope": 306,
									"src": "867:176:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 155,
										"nodeType": "Block",
										"src": "1374:67:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 150,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 142,
															"src": "1395:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 151,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "1398:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 152,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1401:32:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 149,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															156,
															184
														],
														"referencedDeclaration": 184,
														"src": "1391:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1391:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 148,
												"id": 154,
												"nodeType": "Return",
												"src": "1384:50:1"
											}
										]
									},
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "1049:253:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 156,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "1320:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1320:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "1331:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1331:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1319:22:1"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 156,
												"src": "1365:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1365:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1364:9:1"
									},
									"scope": 306,
									"src": "1307:134:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 183,
										"nodeType": "Block",
										"src": "1820:92:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 171,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 169,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 161,
																"src": "1838:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 170,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 159,
																"src": "1843:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1838:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 172,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 163,
															"src": "1846:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 168,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1830:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1830:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 174,
												"nodeType": "ExpressionStatement",
												"src": "1830:29:1"
											},
											{
												"assignments": [
													176
												],
												"declarations": [
													{
														"constant": false,
														"id": 176,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 183,
														"src": "1869:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 175,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1869:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 180,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 177,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "1881:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 178,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "1885:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1881:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1869:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 181,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 176,
													"src": "1904:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 167,
												"id": 182,
												"nodeType": "Return",
												"src": "1897:8:1"
											}
										]
									},
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "1447:273:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 184,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "1738:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1738:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "1749:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "1760:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 162,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1760:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1737:50:1"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 184,
												"src": "1811:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1811:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1810:9:1"
									},
									"scope": 306,
									"src": "1725:187:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 218,
										"nodeType": "Block",
										"src": "2219:392:1",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 194,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 187,
														"src": "2451:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 195,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2456:1:1",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2451:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 200,
												"nodeType": "IfStatement",
												"src": "2447:45:1",
												"trueBody": {
													"id": 199,
													"nodeType": "Block",
													"src": "2459:33:1",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 197,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2480:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 193,
															"id": 198,
															"nodeType": "Return",
															"src": "2473:8:1"
														}
													]
												}
											},
											{
												"assignments": [
													202
												],
												"declarations": [
													{
														"constant": false,
														"id": 202,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 218,
														"src": "2502:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 201,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2502:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 206,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 203,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 187,
														"src": "2514:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 204,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 189,
														"src": "2518:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2514:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2502:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 208,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 202,
																	"src": "2537:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 209,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 187,
																	"src": "2541:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2537:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 211,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 189,
																"src": "2546:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2537:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2549:35:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2529:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2529:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "ExpressionStatement",
												"src": "2529:56:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 216,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 202,
													"src": "2603:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 193,
												"id": 217,
												"nodeType": "Return",
												"src": "2596:8:1"
											}
										]
									},
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "1918:229:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 219,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 219,
												"src": "2165:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 219,
												"src": "2176:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2164:22:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 219,
												"src": "2210:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2209:9:1"
									},
									"scope": 306,
									"src": "2152:459:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "3133:63:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 230,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 222,
															"src": "3154:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 231,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "3157:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 232,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3160:28:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 229,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															236,
															264
														],
														"referencedDeclaration": 264,
														"src": "3150:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3150:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 228,
												"id": 234,
												"nodeType": "Return",
												"src": "3143:46:1"
											}
										]
									},
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2617:444:1",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "3079:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3079:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "3090:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3090:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3078:22:1"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 236,
												"src": "3124:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3124:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3123:9:1"
									},
									"scope": 306,
									"src": "3066:130:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "3766:243:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 249,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 241,
																"src": "3850:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 250,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3854:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3850:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 252,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "3857:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 248,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3842:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3842:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "3842:28:1"
											},
											{
												"assignments": [
													256
												],
												"declarations": [
													{
														"constant": false,
														"id": 256,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 263,
														"src": "3880:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 255,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3880:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 260,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 257,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "3892:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 258,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "3896:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3892:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3880:17:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 261,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 256,
													"src": "4001:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 247,
												"id": 262,
												"nodeType": "Return",
												"src": "3994:8:1"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3202:464:1",
										"text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 264,
												"src": "3684:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3684:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 264,
												"src": "3695:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3695:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 264,
												"src": "3706:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 242,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3706:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3683:50:1"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 264,
												"src": "3757:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3756:9:1"
									},
									"scope": 306,
									"src": "3671:338:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "4520:61:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 275,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 267,
															"src": "4541:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 276,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 269,
															"src": "4544:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4547:26:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 274,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															281,
															305
														],
														"referencedDeclaration": 305,
														"src": "4537:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4537:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 273,
												"id": 279,
												"nodeType": "Return",
												"src": "4530:44:1"
											}
										]
									},
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "4015:433:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "4466:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4466:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "4477:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4477:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4465:22:1"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 281,
												"src": "4511:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4511:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4510:9:1"
									},
									"scope": 306,
									"src": "4453:128:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "5140:68:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 294,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 286,
																"src": "5158:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 295,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5163:1:1",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5158:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 297,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "5166:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 293,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5150:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5150:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 299,
												"nodeType": "ExpressionStatement",
												"src": "5150:29:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 300,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 284,
														"src": "5196:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 301,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "5200:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5196:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 292,
												"id": 303,
												"nodeType": "Return",
												"src": "5189:12:1"
											}
										]
									},
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "4587:453:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5058:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5058:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5069:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5069:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5080:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5080:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5057:50:1"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 305,
												"src": "5131:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5131:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5130:9:1"
									},
									"scope": 306,
									"src": "5045:163:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 307,
							"src": "622:4588:1"
						}
					],
					"src": "33:5178:1"
				},
				"id": 1
			}
		}
	}
}